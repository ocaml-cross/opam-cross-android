From 937d7a6a7e37dc101aee3a7ca32c69550967ae3b Mon Sep 17 00:00:00 2001
From: whitequark <whitequark@whitequark.org>
Date: Fri, 30 Dec 2016 13:24:37 +0000
Subject: [PATCH] ARM: fix excessive immediate values for pc-relative ldr.

ARM does not have an instruction with a 32-bit immediate. Therefore,
on ARM, to load arbitrary 32-bit constants, there are two main
strategies: load the halves of the constant one by one (in Thumb,
this would be done with movw/movt), or periodically emit
the so-called constant islands, that is, small chunks of data inside
executable code that are jumped around.

Note that when loading constant islands, care must be taken to avoid
the same problem as what they are solving: the ldr instruction only
has a 12-bit offset, and so there may not be more than 4K of code
between the load and the constant island it refers to.

The OCaml ARM backend opts for the constant islands. It implements
it as follows: after emitting an instruction, it checks whether,
if the first instruction it has emitted since emitting a previous
constant island, can still address the last constant it is going
to emit.

This works in most cases, but not when emitting Lswitch. Consider
that a switch can have an arbitrarily large jump table. If the jump
table is larger than 4K, then, by the time we have emitted it,
all ldr instructions prior to the switch are irreparably broken.

This commit changes the constant island emission logic to first
calculate the size of an Lswitch, then consider emitting a constant
island, and only afterwards emitting Lswitch. For all other
instructions the logic is unchanged.

To do this in a fully rigorous way, arguably it would be better to
have a separate function that returns the size of an instruction,
and a separate one that emits an instruction. However, emit_instr
has quite a bit of logic, which can affect the size of
the instruction, and so I have opted against duplicating that logic,
on the grounds that this will make maintenance much trickier.
---
 asmcomp/arm/emit.mlp             | 28 +++++++++++++++++++++++++---
 testsuite/tests/asmcomp/Makefile |  2 +-
 2 files changed, 26 insertions(+), 4 deletions(-)

diff --git a/asmcomp/arm/emit.mlp b/asmcomp/arm/emit.mlp
index de61da57d..579c68c06 100644
--- a/asmcomp/arm/emit.mlp
+++ b/asmcomp/arm/emit.mlp
@@ -802,26 +802,48 @@ let emit_instr i =
 
 (* Emission of an instruction sequence *)
 
+(* consider the degenerate case where a single literal is followed by
+   a jump table longer than 4KB; we have to emit the constant pool
+   before the jump table or it will be too late *)
+let emit_instr_before_pool i =
+  match i.desc with
+  | Lswitch jumptbl -> 2 + Array.length jumptbl
+  | _ -> emit_instr i
+
+let emit_instr_after_pool i =
+  match i.desc with
+  | Lswitch _ -> ignore (emit_instr i); ()
+  | _ -> ()
+
 let rec emit_all ninstr i =
   if i.desc = Lend then () else begin
-    let n = emit_instr i in
+    let n = emit_instr_before_pool i in
     let ninstr' = ninstr + n in
     (* fldd can address up to +/-1KB, ldr can address up to +/-4KB *)
     let limit = (if !fpu >= VFPv2 && !float_literals <> []
                  then 127
                  else 511) in
     let limit = limit - !num_literals in
-    if ninstr' >= limit - 64 && not(has_fallthrough i.desc) then begin
+    let fallthrough =
+      match i.desc with
+      | Lswitch _ -> true (* not emitted yet *)
+      | desc -> has_fallthrough desc
+    in
+    if ninstr' >= limit - 64 && not(fallthrough) then begin
       emit_literals();
+      emit_instr_after_pool i;
       emit_all 0 i.next
     end else if !num_literals != 0 && ninstr' >= limit then begin
       let lbl = new_label() in
       `	b	{emit_label lbl}\n`;
       emit_literals();
       `{emit_label lbl}:\n`;
+      emit_instr_after_pool i;
       emit_all 0 i.next
-    end else
+    end else begin
+      emit_instr_after_pool i;
       emit_all ninstr' i.next
+    end
   end
 
 (* Emission of the profiling prelude *)
diff --git a/testsuite/tests/asmcomp/Makefile b/testsuite/tests/asmcomp/Makefile
index abcb87296..7b714c897 100644
--- a/testsuite/tests/asmcomp/Makefile
+++ b/testsuite/tests/asmcomp/Makefile
@@ -49,7 +49,7 @@ lexcmm.ml: lexcmm.mll
 	@$(OCAMLLEX) -q lexcmm.mll
 
 MLCASES=optargs staticalloc bind_tuples is_static register_typing \
-  register_typing_switch
+  register_typing_switch large_switch
 ARGS_is_static=-I $(OTOPDIR)/byterun is_in_static_data.c
 MLCASES_FLAMBDA=is_static_flambda unrolling_flambda unrolling_flambda2 \
   static_float_array_flambda static_float_array_flambda_opaque
-- 
2.11.0

